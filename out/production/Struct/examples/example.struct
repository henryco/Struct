#type : struct
#import: typeName  java.test
#import name: java.other

name: {
    field_1  5;
    {
        typeName:field2::10

        field_3 : "tex t fgg d "//comment1
        {
            name typeName: {
                otherTest =' 5'
                importedTs "  import";
            }
        }
        // int typoTest = 3
        struct_1.struct_2
        {
            struct_24 {
                int val = 5;
            }
            {
                typ: 123
                innerValue.otherValue = 9
            }
        }

        struct_3 : {
            struct_4 : {
                int val = 5;
            }
        }
        link linkName //test

        struct_5.struct_6.test = 3;
    }

    {
        \\test
        tez = 5;
        operation = 12+39 / 12 *3
    }

    field4 :
    {
        // other comment
        field5: 12
        field6 : new [df,d 5, '12 3']//comment3
        field7 = new(df, wse ,1.4 , " d")
    }
}

extra {

    Light "dg"
    size 45

    //links below are same
    testLink: name::field_3;
    testLink2: name::field_3;


    // examples 1 and 2 are same
    // example 1
    numbs: {
        arr [0,1,2,3];
        other new("34", " fg")
        inter.call new ["nope", 1]
        initArr1 : new 2

        initArr4 new
        initArr5 []
        initArr6 ()
    }

    // example 2
    numbs: {
        arr : {
            0: 0
            1: 1
            2: 2
            3: 3
        }

        other : {
            0: 34
            1: " fg"
        }

        inter : {
            call : {
                0: "nope"
                1: 1
            }
        }

        initArr1 : {
            0: 0
            1: 0
        }

        initArr4 : {
        }

        initArr5 : {
        }

        initArr6 : {
        }
    }
}


// 1, 2, 3, 4, 5 are same

// 1

array = (new 2) -> 1

// 2

array = new 2
array -> 1

// 3

array = new 2
array::def(1)

// 4

array = new(0, 0)
array::def(1)
array::super::def(1) //def(1) == forEach(1)


array <Utils::Array> : {
    this : array;
    super: Utils::Array(2, this)

    0: 0
    1: 0

    return
}



Utils : {

    Array(val, ob) : {
        this = ob;
        size = val;

        def forEach(val) {
            i: 0;

            java.action {

                // native java method

                public void act() {
                    int i = 0;
                    for (int i = 0; i < get.("size"); i++) {

                    }
                }
            }


            return
        }
        get(val) {
            return
        }

    }

}





